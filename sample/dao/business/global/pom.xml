<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.nabla.project.databases.sample.dao.business</groupId>
		<artifactId>business</artifactId>
		<version>1.0.1-SNAPSHOT</version>
	</parent>
	<groupId>com.nabla.project.databases.sample.dao.business.global</groupId>
	<artifactId>global</artifactId>
	<packaging>jar</packaging>
	<name>Databases DAO global</name>
	<description>Database-Business-Global Dao : mapping objet-relationnel (ORM)</description>

	<properties>
		<!--<dao.framework>hibernate</dao.framework>-->
		<dao.framework>jpa</dao.framework>
		<database.name>myDBGlobal</database.name>
		<maven.test.skip>false</maven.test.skip>
	</properties>

	<dependencies>
		<!--
		<dependency>
			<groupId>org.appfuse</groupId>
            <artifactId>appfuse-web</artifactId>
            <version>${appfuse.version}</version>
            <type>pom</type>
            -->
		<!-- This exclusion and the dependency following this one allow DAO framework switching. -->
		<!-- You only need these if you want to use JPA or iBATIS. See APF-565 for more information. -->
		<!-- It does no harm to leave it in for Hibernate, but it's not needed. -->
		<!--
            <exclusions>
                <exclusion>
                    <groupId>org.appfuse</groupId>
                    <artifactId>appfuse-hibernate</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
-->
		<dependency>
			<groupId>org.appfuse</groupId>
			<artifactId>appfuse-${dao.framework}</artifactId>
			<version>${appfuse.version}</version>
		</dependency>

		<!--
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring</artifactId>
			<scope>compile</scope>
		</dependency>
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<!-- batik avoid java.lang.NoClassDefFoundError: org/w3c/dom/ElementTraversal -->
		<dependency>
			<groupId>batik</groupId>
			<artifactId>batik-ext</artifactId>
			<version>${batik.ext.version}</version>
		</dependency>

		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<scope>test</scope>
		</dependency>
		<!--
		<dependency>
			<groupId>org.jmock</groupId>
			<artifactId>jmock-junit4</artifactId>
			<version>${jmock.version}</version>
			<scope>test</scope>
		</dependency>
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-mock</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.github.stephenc.jcip</groupId>
			<artifactId>jcip-annotations</artifactId>
			<scope>test</scope>
		</dependency>
		<!--
               <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-jpa</artifactId>
                        <version>${spring.jpa.version}</version>
                </dependency>
                <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-agent</artifactId>
                        <version>${spring.version}</version>
                </dependency>
                <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-aspects</artifactId>
                        <version>${spring.version}</version>
                </dependency>
-->
		<!--
		<dependency>
			<groupId>${jdbc.groupId}</groupId>
			<artifactId>${jdbc.artifactId}</artifactId>
			<version>${jdbc.version}</version>
		</dependency>
-->
	</dependencies>
	<build>
		<plugins>
			<!--
			<plugin>
				<groupId>org.appfuse.plugins</groupId>
				<artifactId>appfuse-maven-plugin</artifactId>
				<version>${appfuse.version}</version>
				<configuration>
					<genericCore>${amp.genericCore}</genericCore>
					<fullSource>${amp.fullSource}</fullSource>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>${jdbc.groupId}</groupId>
						<artifactId>${jdbc.artifactId}</artifactId>
						<version>${jdbc.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			-->
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>create_db</id>
			<build>

				<!-- necessary to enable replacement of property placeholders -->
				<resources>
					<resource>
						<directory>${basedir}/src/main/java</directory>
						<includes>
							<include>**/*.xml</include>
							<include>**/*.properties</include>
						</includes>
						<excludes>
							<exclude>**/web.xml</exclude>
						</excludes>
					</resource>
					<resource>
						<filtering>true</filtering>
						<directory>${basedir}/src/main/resources/hibernate/${database}</directory>
						<!--
						<excludes>
							<exclude>applicationContext-resources.xml</exclude>
						</excludes>
-->
						<includes>
							<include>**/*.xml</include>
							<include>**/*.properties</include>
						</includes>
					</resource>
				</resources>
				<testResources>
					<testResource>
						<directory>${basedir}/src/test/java</directory>
						<includes>
							<include>**/*Test.java</include>
							<include>**/Test*.java</include>
							<include>**/*TestCase.java</include>
							<include>**/*.xml</include>
							<include>**/*.properties</include>
						</includes>
						<excludes>
							<exclude>**/Abstract*Test.java</exclude>
							<exclude>**/Abstract*TestCase.java</exclude>
						</excludes>
					</testResource>
					<testResource>
						<filtering>true</filtering>
						<directory>${basedir}/src/test/resources/hibernate/${database}</directory>
						<includes>
							<include>**/*.xml</include>
							<include>**/*.properties</include>
						</includes>
					</testResource>
				</testResources>
				<plugins>
					<!-- Hibernate3 plugin -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>hibernate3-maven-plugin</artifactId>
						<version>${hibernate3.maven.plugin.version}</version>
						<executions>
							<execution>
								<phase>process-test-resources</phase>
								<goals>
									<goal>hbm2ddl</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>${jdbc.groupId}</groupId>
								<artifactId>${jdbc.artifactId}</artifactId>
								<version>${jdbc.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<components>
								<component>
									<name>hbm2ddl</name>
									<outputDirectory>${target.dir}/site/hibernate3</outputDirectory>
									<!--<implementation>jpaconfiguration</implementation> -->
									<!--<implementation>jdbcconfiguration</implementation> -->
									<implementation>annotationconfiguration</implementation>
								</component>
							</components>
							<componentProperties>
								<drop>true</drop>
								<create>true</create>
								<jdk5>true</jdk5>
								<!--<console>false</console> -->
								<configurationfile>${target.dir}/classes/hibernate.cfg.xml</configurationfile>
								<propertyfile>${target.dir}/classes/jdbc.properties</propertyfile>
								<!--<propertyfile>src/test/resources/jdbc.properties</propertyfile> -->
								<!--<persistenceunit>jpa</persistenceunit>-->
								<outputfilename>create-schema.sql</outputfilename>
							</componentProperties>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>${maven.test.skip}</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<properties>
				<maven.test.skip>true</maven.test.skip>
			</properties>
		</profile>
		<profile>
			<id>dbunit_import</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>dbunit-maven-plugin</artifactId>
						<version>${maven.dbunit.plugin.version}</version>
						<executions>
							<execution>
								<id>test-compile</id>
								<phase>test-compile</phase>
								<goals>
									<goal>operation</goal>
								</goals>
								<!-- specific configurations -->
								<configuration>
									<!--<type>CLEAN_INSERT</type> -->
									<type>${dbunit.operation.type}</type>
									<src>${basedir}/src/test/resources/hibernate/${database}/import-data.xml</src>
								</configuration>
							</execution>
							<!-- Runs before integration tests and jetty:run-war -->
							<!-- <execution> <id>test</id> <phase>test</phase> <goals> <goal>operation</goal> </goals> </execution> -->
						</executions>
						<dependencies>
							<dependency>
								<groupId>${jdbc.groupId}</groupId>
								<artifactId>${jdbc.embedded.artifactId}</artifactId>
								<version>${jdbc.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<dataTypeFactoryName>${dbunit.dataTypeFactoryName}</dataTypeFactoryName>
							<driver>${jdbc.driver}</driver>
							<username>${jdbc.username}</username>
							<password>${jdbc.password}</password>
							<url>${jdbc.url}</url>
							<schema>${dbunit.schema}</schema>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>${maven.test.skip}</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<properties>
				<maven.test.skip>true</maven.test.skip>
			</properties>
		</profile>
		<profile>
			<id>dbunit_export</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>dbunit-maven-plugin</artifactId>
						<version>${maven.dbunit.plugin.version}</version>
						<executions>
							<!-- insert data before test -->
							<!-- <execution> <id>test-compile</id> <phase>test-compile</phase> <goals> <goal>operation</goal> </goals> <configuration>
								<type>${dbunit.operation.type}</type> <src>src/test/data/insert.xml</src> </configuration> </execution> -->
							<!-- export data after test -->
							<execution>
								<phase>test</phase>
								<goals>
									<goal>export</goal>
								</goals>
								<!-- specific configurations -->
								<configuration>
									<format>xml</format>
									<src>${basedir}/src/test/resources/hibernate/${database}/export-data.xml</src>
								</configuration>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>${jdbc.groupId}</groupId>
								<artifactId>${jdbc.embedded.artifactId}</artifactId>
								<version>${jdbc.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<dataTypeFactoryName>${dbunit.dataTypeFactoryName}</dataTypeFactoryName>
							<driver>${jdbc.driver}</driver>
							<username>${jdbc.username}</username>
							<password>${jdbc.password}</password>
							<url>${jdbc.url}</url>
							<!-- <type>${dbunit.operation.type}</type> -->
							<schema>${dbunit.schema}</schema>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<properties>
				<maven.test.skip>true</maven.test.skip>
			</properties>
		</profile>
		<profile>
			<id>hibernate3</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>hibernate3-maven-plugin</artifactId>
						<version>${hibernate3.maven.plugin.version}</version>
						<executions>
							<execution>
								<phase>process-test-resources</phase>
								<goals>
									<goal>hbm2ddl</goal>
									<!--<goal>hbm2java</goal>-->
									<goal>hbm2doc</goal>
									<goal>hbm2cfgxml</goal>
									<!--<goal>hbm2hbmxml</goal>-->
									<!--<goal>hbmtemplate</goal>-->
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>${jdbc.groupId}</groupId>
								<artifactId>${jdbc.artifactId}</artifactId>
								<version>${jdbc.version}</version>
							</dependency>
							<dependency>
								<groupId>asm</groupId>
								<artifactId>asm</artifactId>
								<version>${asm.version}</version>
							</dependency>
							<dependency>
								<groupId>cglib</groupId>
								<artifactId>cglib-nodep</artifactId>
								<version>${cglib.nodep.version}</version>
							</dependency>
							<dependency>
								<groupId>javax.transaction</groupId>
								<artifactId>jta</artifactId>
								<version>${javax.transaction.version}</version>
							</dependency>
							<dependency>
								<groupId>commons-dbcp</groupId>
								<artifactId>commons-dbcp</artifactId>
								<version>${commons.dbcp.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<components>
								<component>
									<name>hbm2ddl</name>
									<outputDirectory>${target.dir}/site/hibernate3/sql</outputDirectory>
									<implementation>annotationconfiguration</implementation>
								</component>
								<component>
									<name>hbm2hbmxml</name>
									<!--<outputDirectory>${target.dir}/hbm</outputDirectory>-->
									<implementation>jdbcconfiguration</implementation>
								</component>
								<component>
									<name>hbm2java</name>
									<!--<outputDirectory>${target.dir}/java</outputDirectory>-->
									<implementation>annotationconfiguration</implementation>
								</component>
								<component>
									<name>hbm2doc</name>
									<outputDirectory>${target.dir}/site/hibernate3/javadoc</outputDirectory>
									<implementation>annotationconfiguration</implementation>
								</component>
								<component>
									<name>hbm2cfgxml</name>
									<outputDirectory>${target.dir}/site/hibernate3/generated-mappings</outputDirectory>
									<implementation>annotationconfiguration</implementation>
								</component>
								<component>
									<name>hbmtemplate</name>
									<!--<outputDirectory>${target.dir}/cfg</outputDirectory>-->
									<implementation>jpaconfiguration</implementation>
								</component>
							</components>
							<componentProperties>
								<!--<implementation>jpaconfiguration</implementation>-->
								<drop>true</drop>
								<create>true</create>
								<export>true</export>
								<configurationfile>${target.dir}/classes/hibernate.cfg.xml</configurationfile>
								<propertyfile>${target.dir}/classes/jdbc.properties</propertyfile>
								<revengfile>src/main/resources/hibernate/${database}/hibernate.reveng.xml</revengfile>
								<!--<template>${target.dir}/hbm/hibernate-mapping.hbm.ftl</template>-->
								<jdk5>true</jdk5>
								<ejb3>true</ejb3>
								<outputfilename>create-schema.sql</outputfilename>
								<!--
								<outputfilename>
								hbm2ddl-${database}.sql
								</outputfilename>
								-->
							</componentProperties>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<!--
			<activation>
				<property>
					<name>!profile.activation</name>
				</property>
			</activation>
			-->
			<properties>
				<maven.test.skip>true</maven.test.skip>
			</properties>
		</profile>
		<profile>
			<id>global-resource</id>
			<activation>
				<property>
					<name>!profile.activation</name>
				</property>
			</activation>
			<build>
				<!-- necessary to enable replacement of property placeholders -->
				<resources>
					<resource>
						<directory>${basedir}/src/main/java</directory>
						<includes>
							<include>**/*.xml</include>
							<include>**/*.properties</include>
						</includes>
						<excludes>
							<exclude>**/web.xml</exclude>
						</excludes>
					</resource>
					<resource>
						<!--
						<excludes>
							<exclude>applicationContext-resources.xml</exclude>
						</excludes>
						 -->
						<filtering>true</filtering>
						<directory>${basedir}/src/main/resources/hibernate/${database}</directory>
						<includes>
							<include>**/*.xml</include>
							<include>**/*.properties</include>
						</includes>
					</resource>

					<!--
					<resource>
						<directory>${basedir}/src/main/resources/hibernate/${database}</directory>
						<includes>
							<include>applicationContext-resources.xml</include>
						</includes>
						<filtering>false</filtering>
					</resource>
					-->
				</resources>
				<testResources>
					<testResource>
						<directory>${basedir}/src/test/java</directory>
						<includes>
							<include>**/*Test.java</include>
							<include>**/Test*.java</include>
							<include>**/*TestCase.java</include>
							<include>**/*.xml</include>
							<include>**/*.properties</include>
						</includes>
						<excludes>
							<exclude>**/Abstract*Test.java</exclude>
							<exclude>**/Abstract*TestCase.java</exclude>
						</excludes>
					</testResource>
					<testResource>
						<filtering>true</filtering>
						<directory>${basedir}/src/test/resources/hibernate/${database}</directory>
						<includes>
							<include>**/*.xml</include>
							<include>**/*.properties</include>
						</includes>
					</testResource>
				</testResources>
			</build>
		</profile>
		<profile>
			<id>sql</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<version>${maven.sql.plugin.version}</version>

						<executions>

							<execution>
								<id>test-db-before-test-if-any</id>
								<phase>process-test-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<sqlCommand>SELECT * FROM SYS.SYSTABLES</sqlCommand>
									<!-- ignore error when database is not avaiable -->
									<onError>continue</onError>
								</configuration>
							</execution>

							<!-- drop db before test -->
							<execution>
								<id>drop-schema-before-test</id>
								<phase>process-test-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<autocommit>true</autocommit>
									<sqlCommand>DROP SCHEMA APP RESTRICT</sqlCommand>
									<onError>continue</onError>
								</configuration>
							</execution>

							<execution>
								<id>create-schema</id>
								<phase>process-test-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<!-- no transaction -->
									<autocommit>true</autocommit>
									<sqlCommand>CREATE SCHEMA APP</sqlCommand>
									<onError>continue</onError>
								</configuration>
							</execution>

							<execution>
								<id>create-tables</id>
								<phase>process-test-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<autocommit>true</autocommit>
									<srcFiles>
										<srcFile>sql/create-schema.sql</srcFile>
									</srcFiles>
									<onError>continue</onError>
								</configuration>
							</execution>

							<execution>
								<id>create-data</id>
								<phase>process-test-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<fileset>
										<basedir>${basedir}</basedir>
										<includes>
											<!-- These 2 files may not get executed in sequence, use srcFiles instead, if needed -->
											<include>sql/test-data1.sql</include>
											<include>sql/test-data2.sql</include>
										</includes>
									</fileset>
								</configuration>
							</execution>

							<!--
                                                        <execution>
                                                                <id>shutdown-db-before-test</id>
                                                                <phase>process-test-resources</phase>
                                                                <goals>
                                                                        <goal>execute</goal>
                                                                </goals>
                                                                <configuration>
                                                                        <url>${jdbc.url};shutdown=true</url>
                                                                        <autocommit>true</autocommit>
                                                                        <sqlCommand>SELECT * FROM SYS.SYSTABLES</sqlCommand>
                                                                        <onError>continue</onError>
                                                                </configuration>
                                                        </execution>
                                                        -->

							<!-- TODO for DROP SCHEMA APP RESTRICT to work
                                                        <execution>
                                                                <id>drop-tables</id>
                                                                <phase>test</phase>
                                                                <goals>
                                                                        <goal>execute</goal>
                                                                </goals>
                                                                <configuration>
                                                                        <autocommit>true</autocommit>
                                                                        <srcFiles>
                                                                                <srcFile>${basedir}/src/test/sql/Person-delete.sql</srcFile>
                                                                        </srcFiles>
                                                                        <onError>continue</onError>
                                                                </configuration>
                                                        </execution>
                                                        -->

							<!-- drop db after test -->
							<execution>
								<id>drop-schema-after-test</id>
								<phase>process-test-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<autocommit>true</autocommit>
									<sqlCommand>DROP SCHEMA APP RESTRICT</sqlCommand>
									<onError>continue</onError>
								</configuration>
							</execution>

							<!--
                                                        <execution>
                                                                <id>shutdown-db-after-test</id>
                                                                <phase>test</phase>
                                                                <goals>
                                                                        <goal>execute</goal>
                                                                </goals>
                                                                <configuration>
                                                                        <url>${jdbc.url};shutdown=true</url>
                                                                        <autocommit>true</autocommit>
                                                                        <sqlCommand>SELECT * FROM SYS.SYSTABLES</sqlCommand>
                                                                        <onError>continue</onError>
                                                                </configuration>
                                                        </execution>
                                                        -->

						</executions>
						<dependencies>
							<!-- specify the dependent jdbc driver here -->
							<!-- inlude org.apache.derby.jdbc.EmbeddedDriver -->
							<dependency>
								<groupId>${jdbc.groupId}</groupId>
								<artifactId>${jdbc.artifactId}</artifactId>
								<version>${jdbc.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<username>APP</username>
							<password>APP</password>
							<!-- You can comment out username/password configurations and
                                                                have maven to look them up in your settings.xml using ${settingsKey}
                                                        -->
							<!-- <settingsKeys>sensibleKey</settingsKeys> -->
							<driver>${jdbc.driver}</driver>
							<url>${jdbc.url};create=true</url>
							<!--all executions are ignored if -Dmaven.test.skip=true-->
							<!--<skip>${maven.test.skip}</skip>-->
							<skip>false</skip>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!--<skip>${maven.test.skip}</skip>-->
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<properties>
				<!--<maven.test.skip>false</maven.test.skip>-->
				<jdbc.client.url><![CDATA[jdbc:derby:~/${database.name}]]></jdbc.client.url>
			</properties>
		</profile>
	</profiles>

</project>
