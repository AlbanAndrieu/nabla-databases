package com.nabla.project.application.model.person.entity;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

/**
 * AbstractPerson generated by MyEclipse Persistence Tools
 */
@MappedSuperclass
public abstract class AbstractPerson implements java.io.Serializable
{

    private static final long serialVersionUID = 1L;

    // Fields
    private Long              id;
    private Integer           version;
    private Address           address;
    private Date              birthdate;
    private String            firstname;
    private String            lastname;

    // private Short married;
    private Boolean           married;
    private Integer           nbchildren;
    private Set<Activity>     activities       = new HashSet<Activity>(0);

    // Constructors

    /** default constructor */
    public AbstractPerson()
    {
    }

    /** minimal constructor */
    public AbstractPerson(final Long id, final Address address, final Date birthdate, final String firstname, final String lastname, final Boolean married, final Integer nbchildren)
    {
        this.id = id;
        this.address = address;
        this.birthdate = birthdate;
        this.firstname = firstname;
        this.lastname = lastname;
        this.married = married;
        this.nbchildren = nbchildren;
    }

    /** full constructor */
    public AbstractPerson(final Long id, final Address address, final Date birthdate, final String firstname, final String lastname, final Boolean married, final Integer nbchildren, final Set<Activity> activities)
    {
        this.id = id;
        this.address = address;
        this.birthdate = birthdate;
        this.firstname = firstname;
        this.lastname = lastname;
        this.married = married;
        this.nbchildren = nbchildren;
        this.activities = activities;
    }

    // Property accessors
    @Id
    // @Column( name = "ID", unique = true, nullable = false, insertable = true, updatable = true )
    @Column(nullable = false)
    @GeneratedValue(strategy = GenerationType.AUTO)
    public Long getId()
    {
        return this.id;
    }

    public void setId(final Long id)
    {
        this.id = id;
    }

    @Version
    @Column(name = "VERSION", unique = false, nullable = false, insertable = true, updatable = true)
    public Integer getVersion()
    {
        return this.version;
    }

    public void setVersion(final Integer version)
    {
        this.version = version;
    }

    // relation principale Person (one) -> Address (one)
    // implementee par la cle etrangere Person(adresse_id) -> Address
    // cascade insertion Person -> insertion Address
    // cascade maj Person -> maj Address
    // cascade suppression Person -> suppression Address
    // une Person doit avoir 1 Address (nullable=false)
    // 1 Address n'appartient qu'e 1 personne (unique=true)
    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "ADDRESS_ID", unique = true, nullable = false)
    /*
     * @ManyToOne(cascade = {}, fetch = FetchType.LAZY)
     * @JoinColumn(name = "ADDRESS_ID", unique = true, nullable = false, insertable = true, updatable = true)
     */
    public Address getAddress()
    {
        return this.address;
    }

    public void setAddress(final Address address)
    {
        this.address = address;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "BIRTHDATE", unique = false, nullable = false, insertable = true, updatable = true, length = 10)
    public Date getBirthdate()
    {
        return this.birthdate;
    }

    public void setBirthdate(final Date birthdate)
    {
        this.birthdate = birthdate;
    }

    @Column(name = "FIRSTNAME", unique = false, nullable = false, insertable = true, updatable = true, length = 30)
    public String getFirstname()
    {
        return this.firstname;
    }

    public void setFirstname(final String firstname)
    {
        this.firstname = firstname;
    }

    @Column(name = "LASTNAME", unique = true, nullable = false, insertable = true, updatable = true, length = 30)
    public String getLastname()
    {
        return this.lastname;
    }

    public void setLastname(final String lastname)
    {
        this.lastname = lastname;
    }

    @Column(name = "MARRIED", unique = false, nullable = false, insertable = true, updatable = true)
    public Boolean getMarried()
    {
        return this.married;
    }

    public void setMarried(final Boolean married)
    {
        this.married = married;
    }

    @Column(name = "NBCHILDREN", unique = false, nullable = false, insertable = true, updatable = true)
    public Integer getNbchildren()
    {
        return this.nbchildren;
    }

    public void setNbchildren(final Integer nbchildren)
    {
        this.nbchildren = nbchildren;
    }

    // relation Person (many) -> Activity (many) via une table de jointure PersonneActivite
    // PersonneActivite5(PERSONNE_ID) est cle etangere sur Person(id)
    // PersonneActivite5(ACTIVITE_ID) est cle etangere sur Activity(id)
    // plus de cascade sur les activites
    // @ManyToMany(cascade={CascadeType.PERSIST})
    @ManyToMany()
    @JoinTable(name = "PERSONACTIVITY", joinColumns = @JoinColumn(name = "PERSON_ID"), inverseJoinColumns = @JoinColumn(name = "ACTIVITY_ID")

    )
    /*
     * @ManyToMany(cascade = { CascadeType.ALL }, fetch = FetchType.LAZY)
     * @JoinTable(name = "PERSONACTIVITY", schema = "APP", joinColumns = { @JoinColumn(name = "PERSON_ID", unique = false, nullable = true, insertable = true, updatable = false) }, inverseJoinColumns = { @JoinColumn(name
     * = "ACTIVITY_ID", unique = false, nullable = true, insertable = true, updatable = false) })
     */
    public Set<Activity> getActivities()
    {
        return this.activities;
    }

    public void setActivities(final Set<Activity> activities)
    {
        this.activities = activities;
    }
}
