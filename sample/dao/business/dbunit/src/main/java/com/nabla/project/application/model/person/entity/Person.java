package com.nabla.project.application.model.person.entity;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.Table;

/**
 * Person generated by MyEclipse Persistence Tools
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "PERSON", schema = "" /*
                                     * , uniqueConstraints =
                                     * {
                                     * @UniqueConstraint( columnNames =
                                     * {
                                     * "LASTNAME"}
                                     * )
                                     * , @UniqueConstraint( columnNames =
                                     * {
                                     * "ADDRESS_ID"}
                                     * )
                                     * }
                                     */
)
public class Person extends AbstractPerson implements java.io.Serializable
{
    // Constructors

    /** default constructor */
    public Person()
    {
    }

    /** minimal constructor */
    public Person(final Long id, final Address address, final Date birthdate, final String firstname, final String lastname, final Boolean married, final Integer nbchildren)
    {
        super(id, address, birthdate, firstname, lastname, married, nbchildren);
    }

    /** full constructor */
    public Person(final Long id, final Address address, final Date birthdate, final String firstname, final String lastname, final Boolean married, final Integer nbchildren, final Set<Activity> activities)
    {
        super(id, address, birthdate, firstname, lastname, married, nbchildren, activities);
    }

    public Person(final String lastname, final String firstname, final Date birtdate, final boolean married, final int nbchildren)
    {
        super();
        this.setLastname(lastname);
        this.setFirstname(firstname);
        this.setBirthdate(birtdate);
        this.setMarried(married);
        this.setNbchildren(nbchildren);
    }

    @Override
    public boolean equals(final Object o)
    {
        if (this == o)
        {
            return true;
        }

        if ((o == null) || (this.getClass() != o.getClass()))
        {
            return false;
        }

        final Person person = (Person) o;

        if ((this.getFirstname() != null) ? (!this.getFirstname().equals(person.getFirstname())) : (person.getFirstname() != null))
        {
            return false;
        }

        if ((this.getLastname() != null) ? (!this.getLastname().equals(person.getLastname())) : (person.getLastname() != null))
        {
            return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        int result;
        result = ((this.getFirstname() != null) ? this.getFirstname().hashCode() : 0);
        result = (31 * result) + ((this.getLastname() != null) ? this.getLastname().hashCode() : 0);

        return result;
    }

    @Override
    public String toString()
    {
        return String.format("P[%d,%d,%s,%s,%s,%s,%d,%d]", this.getId(), this.getVersion(), this.getLastname(), this.getFirstname(), new SimpleDateFormat("dd/MM/yyyy").format(this.getBirthdate()), this.getMarried(),
                this.getNbchildren(), this.getAddress().getId());
    }
}
