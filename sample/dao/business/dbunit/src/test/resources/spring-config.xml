<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

	<!-- Global beans -->
	<import resource="applicationContext-resources.xml"/>

	<!-- la JVM doit être lancée avec l'argument -javaagent:C:\data\2006-2007\eclipse\dvp-jpa\lib\spring\spring-agent.jar
		(à remplacer par le chemin exact de spring-agent.jar)-->

	<!-- le gestionnaire de transactions -->
	<!-- http://www.mydeveloperconnection.com/html/spring-hibernate-QnA.htm-->
	<!-- Transaction manager for a single EntityManagerFactory (alternative to JTA) -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<!-- sessionFactory -->
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter -->
	<!-- oracle.toplink.essentials.platform.database.DerbyPlatform -->
	<!--
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
				<property name="databasePlatform" value="${hibernate.dialect}" />
				<property name="generateDdl" value="true" />
			</bean>
		</property>
		<property name="loadTimeWeaver">
			<bean
				class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
		</property>
	</bean>
	 -->

    <!-- EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitManager" ref="persistenceUnitManager"/>
        <property name="jpaProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.DerbyDialect
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.cache.use_second_level_cache=true
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
            </value>
            <!-- Turn batching off for better error messages under PostgreSQL -->
            <!-- hibernate.jdbc.batch_size=0 -->
        </property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
				<!-- <property name="databasePlatform" value="${hibernate.dialect}" /> -->
				<property name="generateDdl" value="true" />
			</bean>
		</property>
		<property name="loadTimeWeaver">
			<bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
		</property>
    </bean>

    <bean id="persistenceUnitManager" class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
        <property name="persistenceXmlLocations">
            <list>
                <value>classpath:META-INF/persistence.xml</value>
            </list>
        </property>
        <property name="defaultDataSource" ref="dataSource"/>
    </bean>

	<!-- traduction des exceptions -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- persistence -->
    <!-- Needed so the @PersistenceUnit annotation is recognized -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <!-- UniversalDao - can be used when doing standard CRUD - made available
        for those who don't mind casting.  If you don't want to cast, look at
        'fooDao' below. -->
    <!--
    <bean id="universalDao" class="org.appfuse.dao.jpa.UniversalDaoJpa"/>
     -->

    <!-- LookupDao - can be used when doing standard CRUD -->
    <!--
    <bean id="lookupDao" class="org.appfuse.dao.jpa.LookupDaoJpa"/>
     -->

    <!-- UserDao: Hibernate implementation -->
    <bean id="userDao" class="org.appfuse.dao.jpa.UserDaoJpa"/>

    <!-- RoleDao: Hibernate implementation -->
    <bean id="roleDao" class="org.appfuse.dao.jpa.RoleDaoJpa"/>

    <!-- If you want to be able to do simple CRUD for new domain objects without
        having to cast, you don't have create a Dao interface and implementation
        for that domain object, you simply have to do the following.

        <bean id="fooDao" class="org.appfuse.dao.jpa.GenericDaoJpa">
            <constructor-arg value="org.appfuse.model.Foo"/>
        </bean>

        You will need to create a Dao interface and implementation for that
        domain object if you need more than simple CRUD to occur.
        (finders, bulk update/delete, etc.) eg... 'fooDao'
    -->

    <!-- Add new DAOs here -->

	<!--
	<bean id="AddressDAO"
		class="com.nabla.project.application.model.dao.person.dao.AddressDAO">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
	</bean>
	<bean id="PersonDAO"
		class="com.nabla.project.application.model.dao.person.dao.PersonDAO">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
	</bean>
	<bean id="ActivityDAO"
		class="com.nabla.project.application.model.dao.person.dao.ActivityDAO">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
	</bean>
 	-->

	<!-- couches applicatives -->

</beans>
